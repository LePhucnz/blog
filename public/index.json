[{"content":"👋 Giới thiệu về tôi Xin chào! Mình là Lê Mai Hoàng Phúc – sinh viên chuyên ngành Công nghệ Thông tin, đam mê lập trình và đặc biệt yêu thích lĩnh vực lập trình mạng.\nMình bắt đầu hành trình học lập trình với Java và JavaScript – hai ngôn ngữ cốt lõi giúp mình hiểu rõ hơn về:\nCách các ứng dụng giao tiếp qua mạng Cách xây dựng nên các hệ thống web hiện đại, từ backend đến frontend 🎯 Về blog này Blog này được mình tạo ra như một nơi để chia sẻ kiến thức, kinh nghiệm và ghi chép học tập, bao gồm:\n🔹 Java Core, Java Web và các kỹ thuật lập trình hướng đối tượng 🔹 JavaScript, Node.js, cùng các mini-project thực hành lập trình web 🔹 Lập trình mạng – tổng hợp, phân tích, và hướng dẫn triển khai thực tế Mục tiêu của blog là giúp bản thân hệ thống hóa kiến thức, đồng thời chia sẻ lại cho cộng đồng – những ai đang cùng hành trình học lập trình.\nMình tin rằng: Khi chia sẻ – chúng ta học được nhiều hơn.\n🎓 Chứng chỉ Cisco 📌 Ảnh chứng chỉ được xác minh trực tiếp từ Cisco Networking Academy thông qua nền tảng Credly.\n🌐 Liên hệ Nếu bạn quan tâm đến lập trình mạng hoặc muốn trao đổi thêm, có thể kết nối với mình qua các kênh sau:\n🧑‍💻 GitHub: github.com/LePhucnz ✉️ Email: lhphuc0910@gmail.com 🌍 Facebook / LinkedIn: facebook.com/phuv.le.790 Cảm ơn bạn đã ghé thăm blog!\nHy vọng những chia sẻ tại đây sẽ giúp ích cho bạn trên con đường học lập trình 🚀\n","permalink":"https://lephucnz.github.io/blog/about/","summary":"\u003ch1 id=\"-giới-thiệu-về-tôi\"\u003e👋 Giới thiệu về tôi\u003c/h1\u003e\n\u003cp\u003eXin chào! Mình là \u003cstrong\u003eLê Mai Hoàng Phúc\u003c/strong\u003e – sinh viên chuyên ngành \u003cstrong\u003eCông nghệ Thông tin\u003c/strong\u003e, đam mê lập trình và đặc biệt yêu thích \u003cstrong\u003elĩnh vực lập trình mạng\u003c/strong\u003e.\u003c/p\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cimg src=\"/blog/images/cert/anhdaidien.png\" alt=\"Giới thiệu về tôi\" style=\"max-width: 100%;\" /\u003e\n\u003c/div\u003e\n\u003cp\u003eMình bắt đầu hành trình học lập trình với \u003cstrong\u003eJava\u003c/strong\u003e và \u003cstrong\u003eJavaScript\u003c/strong\u003e – hai ngôn ngữ cốt lõi giúp mình hiểu rõ hơn về:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCách các ứng dụng giao tiếp qua mạng\u003c/li\u003e\n\u003cli\u003eCách xây dựng nên các hệ thống web hiện đại, từ backend đến frontend\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-về-blog-này\"\u003e🎯 Về blog này\u003c/h2\u003e\n\u003cp\u003eBlog này được mình tạo ra như một nơi để \u003cstrong\u003echia sẻ kiến thức, kinh nghiệm và ghi chép học tập\u003c/strong\u003e, bao gồm:\u003c/p\u003e","title":"About"},{"content":"🌐 HTTP là gì? HTTP (HyperText Transfer Protocol) là giao thức truyền tải dữ liệu giữa client và server trong môi trường web. Khi em truy cập một trang web, trình duyệt sẽ gửi yêu cầu HTTP đến server, và server sẽ phản hồi lại bằng nội dung HTML, JSON, hình ảnh, v.v.\n🔍 Các phương thức HTTP phổ biến Phương thức Mô tả GET Lấy dữ liệu từ server POST Gửi dữ liệu lên server PUT Cập nhật dữ liệu DELETE Xóa dữ liệu 🧪 Gửi yêu cầu HTTP bằng Java Trong Java, em có thể sử dụng lớp HttpURLConnection để gửi yêu cầu HTTP đến một địa chỉ URL.\n🔹 Gửi yêu cầu GET import java.io.*; import java.net.*; public class HttpGetExample { public static void main(String[] args) throws Exception { URL url = new URL(\u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34;); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod(\u0026#34;GET\u0026#34;); BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) { response.append(inputLine); } in.close(); System.out.println(\u0026#34;Phản hồi từ server:\u0026#34;); System.out.println(response.toString()); } } 🔹 Gửi yêu cầu POST import java.io.*; import java.net.*; public class HttpPostExample { public static void main(String[] args) throws Exception { URL url = new URL(\u0026#34;https://jsonplaceholder.typicode.com/posts\u0026#34;); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod(\u0026#34;POST\u0026#34;); conn.setRequestProperty(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json; utf-8\u0026#34;); conn.setDoOutput(true); String jsonInput = \u0026#34;{\\\u0026#34;title\\\u0026#34;:\\\u0026#34;Phúc\\\u0026#34;,\\\u0026#34;body\\\u0026#34;:\\\u0026#34;Hello HTTP!\\\u0026#34;,\\\u0026#34;userId\\\u0026#34;:1}\u0026#34;; try (OutputStream os = conn.getOutputStream()) { byte[] input = jsonInput.getBytes(\u0026#34;utf-8\u0026#34;); os.write(input, 0, input.length); } BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), \u0026#34;utf-8\u0026#34;)); StringBuilder response = new StringBuilder(); String line; while ((line = in.readLine()) != null) { response.append(line.trim()); } in.close(); System.out.println(\u0026#34;Phản hồi từ server:\u0026#34;); System.out.println(response.toString()); } } 📦 Mở rộng Sau khi hiểu cách gửi yêu cầu HTTP bằng Java, em có thể:\nSử dụng thư viện HttpClient (Java 11+) để viết code gọn hơn Gửi yêu cầu có Header, Token, hoặc Cookie Xử lý mã trạng thái HTTP (200, 404, 500\u0026hellip;) Tích hợp với REST API trong các dự án thực tế 📌 Kết luận HTTP là nền tảng của web hiện đại. Việc biết cách gửi yêu cầu HTTP bằng Java sẽ giúp em:\nTương tác với REST API Kết nối frontend và backend Kiểm thử dịch vụ web Xây dựng ứng dụng mạng chuyên nghiệp ","permalink":"https://lephucnz.github.io/blog/posts/new6/","summary":"\u003ch2 id=\"-http-là-gì\"\u003e🌐 HTTP là gì?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eHTTP (HyperText Transfer Protocol)\u003c/strong\u003e là giao thức truyền tải dữ liệu giữa client và server trong môi trường web. Khi em truy cập một trang web, trình duyệt sẽ gửi yêu cầu HTTP đến server, và server sẽ phản hồi lại bằng nội dung HTML, JSON, hình ảnh, v.v.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-các-phương-thức-http-phổ-biến\"\u003e🔍 Các phương thức HTTP phổ biến\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePhương thức\u003c/th\u003e\n          \u003cth\u003eMô tả\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eGET\u003c/td\u003e\n          \u003ctd\u003eLấy dữ liệu từ server\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ePOST\u003c/td\u003e\n          \u003ctd\u003eGửi dữ liệu lên server\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ePUT\u003c/td\u003e\n          \u003ctd\u003eCập nhật dữ liệu\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eDELETE\u003c/td\u003e\n          \u003ctd\u003eXóa dữ liệu\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-gửi-yêu-cầu-http-bằng-java\"\u003e🧪 Gửi yêu cầu HTTP bằng Java\u003c/h2\u003e\n\u003cp\u003eTrong Java, em có thể sử dụng lớp \u003ccode\u003eHttpURLConnection\u003c/code\u003e để gửi yêu cầu HTTP đến một địa chỉ URL.\u003c/p\u003e","title":"Giới thiệu giao thức HTTP và cách gửi yêu cầu bằng Java"},{"content":"🧠 Java là gì? Java là một ngôn ngữ lập trình hướng đối tượng (OOP – Object Oriented Programming), được phát triển bởi Sun Microsystems (nay thuộc Oracle).\nKhác với nhiều ngôn ngữ khác, Java nổi bật nhờ khả năng \u0026ldquo;viết một lần, chạy mọi nơi\u0026rdquo; (Write Once, Run Anywhere).\nĐiều này có nghĩa là chương trình viết bằng Java có thể chạy trên mọi hệ điều hành (Windows, Linux, macOS…) nếu có cài đặt Java Virtual Machine (JVM).\n⚙️ Đặc điểm nổi bật của Java 🔹 Đa nền tảng:\nJava biên dịch ra mã trung gian (bytecode) và JVM sẽ chạy bytecode đó trên mọi hệ thống.\n🔹 Hướng đối tượng:\nMọi thứ trong Java đều là đối tượng – giúp tổ chức mã rõ ràng, dễ mở rộng và tái sử dụng.\n🔹 Bảo mật cao:\nJava được thiết kế để hạn chế truy cập trực tiếp vào bộ nhớ và có mô hình bảo mật mạnh.\n🔹 Quản lý bộ nhớ tự động:\nTrình dọn rác (Garbage Collector) tự động giải phóng vùng nhớ không còn dùng đến.\n🔹 Thư viện phong phú:\nJava cung cấp hàng nghìn thư viện hỗ trợ xử lý file, mạng, cơ sở dữ liệu, GUI, v.v.\n💻 Ví dụ đầu tiên với Java Dưới đây là chương trình “Hello World” kinh điển trong Java:\npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026#34;Xin chào thế giới Java!\u0026#34;); } } ","permalink":"https://lephucnz.github.io/blog/posts/new/","summary":"\u003ch2 id=\"-java-là-gì\"\u003e🧠 Java là gì?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eJava\u003c/strong\u003e là một ngôn ngữ lập trình hướng đối tượng (OOP – Object Oriented Programming), được phát triển bởi \u003cstrong\u003eSun Microsystems\u003c/strong\u003e (nay thuộc \u003cstrong\u003eOracle\u003c/strong\u003e).\u003cbr\u003e\nKhác với nhiều ngôn ngữ khác, Java nổi bật nhờ khả năng \u003cstrong\u003e\u0026ldquo;viết một lần, chạy mọi nơi\u0026rdquo;\u003c/strong\u003e (\u003cem\u003eWrite Once, Run Anywhere\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003eĐiều này có nghĩa là chương trình viết bằng Java có thể chạy trên mọi hệ điều hành (Windows, Linux, macOS…) nếu có cài đặt \u003cstrong\u003eJava Virtual Machine (JVM)\u003c/strong\u003e.\u003c/p\u003e","title":"Giới thiệu về ngôn ngữ lập trình Java"},{"content":"🌐 Mục tiêu bài viết Sau khi đã xây dựng xong backend bằng Node.js và MongoDB (bài 6), bài này sẽ hướng dẫn cách kết nối React frontend với API đó để hiển thị danh sách cổ phiếu và thêm mới cổ phiếu từ giao diện người dùng.\n🧩 Cấu trúc dự án portfolio-app/ ├── backend/ // API Node.js đã hoàn thành ở bài trước └── frontend/ // React app sẽ tạo trong bài này 📝 Step 1: Tạo ứng dụng React npx create-react-app frontend cd frontend npm install axios 📝 Step 2: Tạo component hiển thị danh sách cổ phiếu src/components/StockList.js\nimport React, { useEffect, useState } from \u0026#34;react\u0026#34;; import axios from \u0026#34;axios\u0026#34;; const StockList = () =\u0026gt; { const [stocks, setStocks] = useState([]); useEffect(() =\u0026gt; { axios.get(\u0026#34;http://localhost:5000/api/stocks\u0026#34;) .then(res =\u0026gt; setStocks(res.data)) .catch(err =\u0026gt; console.error(err)); }, []); return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Danh sách cổ phiếu\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; {stocks.map(stock =\u0026gt; ( \u0026lt;li key={stock._id}\u0026gt; {stock.symbol} - {stock.shares} cổ phiếu @ {stock.purchasePrice}$ \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); }; export default StockList; 📝 Step 3: Tạo form thêm cổ phiếu mới src/components/AddStock.js\nimport React, { useState } from \u0026#34;react\u0026#34;; import axios from \u0026#34;axios\u0026#34;; const AddStock = () =\u0026gt; { const [form, setForm] = useState({ symbol: \u0026#34;\u0026#34;, shares: \u0026#34;\u0026#34;, purchasePrice: \u0026#34;\u0026#34; }); const handleChange = e =\u0026gt; { setForm({ ...form, [e.target.name]: e.target.value }); }; const handleSubmit = e =\u0026gt; { e.preventDefault(); axios.post(\u0026#34;http://localhost:5000/api/stocks\u0026#34;, form) .then(res =\u0026gt; { alert(\u0026#34;Thêm thành công!\u0026#34;); setForm({ symbol: \u0026#34;\u0026#34;, shares: \u0026#34;\u0026#34;, purchasePrice: \u0026#34;\u0026#34; }); }) .catch(err =\u0026gt; console.error(err)); }; return ( \u0026lt;form onSubmit={handleSubmit}\u0026gt; \u0026lt;h2\u0026gt;Thêm cổ phiếu\u0026lt;/h2\u0026gt; \u0026lt;input name=\u0026#34;symbol\u0026#34; value={form.symbol} onChange={handleChange} placeholder=\u0026#34;Mã cổ phiếu\u0026#34; /\u0026gt; \u0026lt;input name=\u0026#34;shares\u0026#34; value={form.shares} onChange={handleChange} placeholder=\u0026#34;Số lượng\u0026#34; /\u0026gt; \u0026lt;input name=\u0026#34;purchasePrice\u0026#34; value={form.purchasePrice} onChange={handleChange} placeholder=\u0026#34;Giá mua\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Thêm\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; ); }; export default AddStock; 📝 Step 4: Sử dụng các component trong App.js src/App.js\nimport React from \u0026#34;react\u0026#34;; import StockList from \u0026#34;./components/StockList\u0026#34;; import AddStock from \u0026#34;./components/AddStock\u0026#34;; function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Quản lý danh mục đầu tư\u0026lt;/h1\u0026gt; \u0026lt;AddStock /\u0026gt; \u0026lt;StockList /\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; 📝 Step 5: Cho phép CORS từ frontend Trong file backend/index.js, đảm bảo đã có:\napp.use(cors()); 🚀 Kết quả Khi chạy cả backend và frontend:\nNgười dùng có thể nhập thông tin cổ phiếu và gửi lên server Dữ liệu sẽ được lưu vào MongoDB Danh sách cổ phiếu sẽ được hiển thị ngay trên giao diện React 📌 Kết luận Việc kết nối React với Node.js thông qua REST API là bước quan trọng để xây dựng ứng dụng web hoàn chỉnh. Sau bài này, em có thể:\nThêm chức năng sửa và xóa cổ phiếu Hiển thị biểu đồ đầu tư bằng thư viện Chart.js Tích hợp xác thực người dùng bằng JWT Deploy cả frontend và backend lên Vercel, Render, hoặc Railway ","permalink":"https://lephucnz.github.io/blog/posts/new7/","summary":"\u003ch2 id=\"-mục-tiêu-bài-viết\"\u003e🌐 Mục tiêu bài viết\u003c/h2\u003e\n\u003cp\u003eSau khi đã xây dựng xong backend bằng Node.js và MongoDB (bài 6), bài này sẽ hướng dẫn cách kết nối \u003cstrong\u003eReact frontend\u003c/strong\u003e với API đó để hiển thị danh sách cổ phiếu và thêm mới cổ phiếu từ giao diện người dùng.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-cấu-trúc-dự-án\"\u003e🧩 Cấu trúc dự án\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eportfolio-app/\n├── backend/        // API Node.js đã hoàn thành ở bài trước\n└── frontend/       // React app sẽ tạo trong bài này\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"-step-1-tạo-ứng-dụng-react\"\u003e📝 Step 1: Tạo ứng dụng React\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpx create-react-app frontend\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd frontend\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install axios\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"-step-2-tạo-component-hiển-thị-danh-sách-cổ-phiếu\"\u003e📝 Step 2: Tạo component hiển thị danh sách cổ phiếu\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003esrc/components/StockList.js\u003c/strong\u003e\u003c/p\u003e","title":"Kết nối React với API Node.js"},{"content":"🌐 REST API là gì? REST API (Representational State Transfer Application Programming Interface) là một kiểu kiến trúc phần mềm giúp các hệ thống giao tiếp với nhau thông qua giao thức HTTP.\nREST API thường được sử dụng để xây dựng các dịch vụ web hiện đại, nơi client (trình duyệt, ứng dụng di động\u0026hellip;) có thể gửi yêu cầu đến server để lấy hoặc thay đổi dữ liệu.\n🔑 Đặc điểm chính của REST API: Stateless (Không trạng thái): Mỗi yêu cầu từ client đến server phải chứa đầy đủ thông tin để server xử lý. Sử dụng HTTP: REST tận dụng các phương thức HTTP như GET, POST, PUT, DELETE để thực hiện các thao tác CRUD (Create, Read, Update, Delete). Dữ liệu trả về thường ở định dạng JSON hoặc XML, trong đó JSON phổ biến nhất vì nhẹ và dễ xử lý. Tài nguyên được định danh bằng URL: Ví dụ: /users, /products, /orders 🚀 Tại sao nên dùng Spring Boot để xây REST API? Spring Boot là một framework mạnh mẽ trong hệ sinh thái Java, giúp lập trình viên xây dựng ứng dụng web và dịch vụ backend một cách nhanh chóng – dễ dàng – hiệu quả.\n⚡ Ưu điểm của Spring Boot: ✅ Cấu hình tối giản, khởi tạo nhanh ✅ Tích hợp sẵn các công cụ như Tomcat, Jetty ✅ Hỗ trợ mạnh cho RESTful API qua annotation: @RestController, @RequestMapping, @GetMapping, @PostMapping, \u0026hellip; ✅ Dễ dàng tích hợp với JPA, Hibernate, Security, Swagger, v.v. 🧩 Bước 2: Viết Controller đầu tiên Tạo một lớp controller để định nghĩa các endpoint REST API — nơi xử lý yêu cầu từ client.\n📄 HelloController.java package com.example.demo.controllers; import org.springframework.web.bind.annotation.*; @RestController @RequestMapping(\u0026#34;/hello\u0026#34;) public class HelloController { @GetMapping(\u0026#34;\u0026#34;) public String sayHello() { return \u0026#34;Xin chào từ REST API!\u0026#34;; } @PostMapping(\u0026#34;\u0026#34;) public String receiveHello(@RequestBody String name) { return \u0026#34;Chào bạn, \u0026#34; + name + \u0026#34;!\u0026#34;; } } 💠 Bước 3: Cấu hình ứng dụng Đây là lớp khởi động chính của Spring Boot. Khi chạy lớp này, ứng dụng sẽ được khởi tạo, các controller sẽ được quét và server sẽ bắt đầu lắng nghe yêu cầu.\n📄 DemoApplication.java package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } 📝 Giải thích: @SpringBootApplication: Annotation tổng hợp giúp Spring Boot tự động cấu hình. SpringApplication.run(...): Khởi động ứng dụng và mở cổng mặc định (8080). 🧪 Kiểm thử REST API Sau khi chạy ứng dụng bằng lệnh:\nmvn spring-boot:run 🔹 Gửi yêu cầu GET: curl http://localhost:8080/hello ➡️ Kết quả:\nXin chào từ REST API! 🔹 Gửi yêu cầu POST: curl -X POST http://localhost:8080/hello -H \u0026#34;Content-Type: text/plain\u0026#34; -d \u0026#34;Phúc\u0026#34; ➡️ Kết quả:\nChào bạn, Phúc! 🔧 Mở rộng REST API Sau khi hiểu cách tạo API đơn giản, bạn có thể mở rộng bằng cách:\n🏗️ Thêm các lớp: Model: Biểu diễn dữ liệu (User, Product, Order\u0026hellip;) Service: Xử lý logic nghiệp vụ Repository: Kết nối cơ sở dữ liệu (JPA hoặc JDBC) ⚡ Thêm tính năng nâng cao: Phân trang \u0026amp; lọc dữ liệu Xác thực người dùng (JWT, OAuth2) Quản lý lỗi \u0026amp; exception Tài liệu API bằng Swagger UI 📌 Kết luận REST API là nền tảng quan trọng trong phát triển phần mềm hiện đại, đặc biệt khi xây dựng ứng dụng web, mobile hoặc hệ thống phân tán.\nViệc sử dụng Spring Boot giúp lập trình viên Java triển khai REST API nhanh, dễ bảo trì và mở rộng.\n🌱 Ứng dụng thực tế Tạo backend cho blog cá nhân Kết nối frontend (React, Angular, Vue) với server Xây dựng hệ thống quản lý người dùng, bài viết, bình luận\u0026hellip; Tích hợp với mobile app hoặc hệ thống IoT ","permalink":"https://lephucnz.github.io/blog/posts/new3/","summary":"\u003ch2 id=\"-rest-api-là-gì\"\u003e🌐 REST API là gì?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eREST API\u003c/strong\u003e (Representational State Transfer Application Programming Interface) là một kiểu kiến trúc phần mềm giúp các hệ thống giao tiếp với nhau thông qua giao thức HTTP.\u003cbr\u003e\nREST API thường được sử dụng để xây dựng các dịch vụ web hiện đại, nơi client (trình duyệt, ứng dụng di động\u0026hellip;) có thể gửi yêu cầu đến server để lấy hoặc thay đổi dữ liệu.\u003c/p\u003e","title":"REST API là gì? Cách xây dựng với Spring Boot"},{"content":"🌐 Giới thiệu Trong lập trình mạng, hai giao thức phổ biến nhất để truyền dữ liệu là TCP (Transmission Control Protocol) và UDP (User Datagram Protocol). Mỗi giao thức có đặc điểm riêng, phù hợp với từng loại ứng dụng khác nhau.\nBài viết này sẽ giúp em hiểu rõ sự khác biệt giữa TCP và UDP, cách sử dụng chúng trong Java, và khi nào nên chọn giao thức nào.\n🔍 So sánh TCP và UDP Tiêu chí TCP UDP Kiểu kết nối Có kết nối (connection-oriented) Không kết nối (connectionless) Đảm bảo dữ liệu Có (gửi đúng thứ tự, không mất gói) Không đảm bảo (có thể mất gói, sai thứ tự) Tốc độ truyền Chậm hơn do kiểm tra lỗi và xác nhận Nhanh hơn vì không kiểm tra lỗi Ứng dụng phổ biến Web, Email, FTP, Chat Video streaming, game online, VoIP Mức độ tin cậy Cao Thấp 🧪 Ví dụ: TCP và UDP trong Java 🔹 TCP Server import java.io.*; import java.net.*; public class TCPServer { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(1234); System.out.println(\u0026#34;TCP Server đang chạy...\u0026#34;); Socket socket = serverSocket.accept(); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter out = new PrintWriter(socket.getOutputStream(), true); String message = in.readLine(); System.out.println(\u0026#34;Client gửi: \u0026#34; + message); out.println(\u0026#34;Server nhận: \u0026#34; + message); socket.close(); serverSocket.close(); } } 🔹 TCP Client import java.io.*; import java.net.*; public class TCPClient { public static void main(String[] args) throws IOException { Socket socket = new Socket(\u0026#34;localhost\u0026#34;, 1234); PrintWriter out = new PrintWriter(socket.getOutputStream(), true); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())); out.println(\u0026#34;Xin chào TCP Server!\u0026#34;); System.out.println(\u0026#34;Phản hồi từ server: \u0026#34; + in.readLine()); socket.close(); } } 🔹 UDP Server import java.net.*; public class UDPServer { public static void main(String[] args) throws Exception { DatagramSocket socket = new DatagramSocket(1234); byte[] buffer = new byte[1024]; DatagramPacket packet = new DatagramPacket(buffer, buffer.length); System.out.println(\u0026#34;UDP Server đang chạy...\u0026#34;); socket.receive(packet); String message = new String(packet.getData(), 0, packet.getLength()); System.out.println(\u0026#34;Client gửi: \u0026#34; + message); String response = \u0026#34;Server nhận: \u0026#34; + message; byte[] responseData = response.getBytes(); DatagramPacket responsePacket = new DatagramPacket( responseData, responseData.length, packet.getAddress(), packet.getPort() ); socket.send(responsePacket); socket.close(); } } 🔹 UDP Client import java.net.*; public class UDPClient { public static void main(String[] args) throws Exception { DatagramSocket socket = new DatagramSocket(); byte[] data = \u0026#34;Xin chào UDP Server!\u0026#34;.getBytes(); InetAddress address = InetAddress.getByName(\u0026#34;localhost\u0026#34;); DatagramPacket packet = new DatagramPacket(data, data.length, address, 1234); socket.send(packet); byte[] buffer = new byte[1024]; DatagramPacket response = new DatagramPacket(buffer, buffer.length); socket.receive(response); String reply = new String(response.getData(), 0, response.getLength()); System.out.println(\u0026#34;Phản hồi từ server: \u0026#34; + reply); socket.close(); } } 📌 Kết luận TCP phù hợp với các ứng dụng cần độ tin cậy cao như chat, email, truyền file. UDP phù hợp với các ứng dụng cần tốc độ cao, chấp nhận mất dữ liệu như video, game, truyền âm thanh. Việc hiểu rõ sự khác biệt giữa TCP và UDP sẽ giúp em chọn đúng giao thức cho từng loại ứng dụng mạng, từ đó tối ưu hiệu năng và trải nghiệm người dùng.\n","permalink":"https://lephucnz.github.io/blog/posts/new5/","summary":"\u003ch2 id=\"-giới-thiệu\"\u003e🌐 Giới thiệu\u003c/h2\u003e\n\u003cp\u003eTrong lập trình mạng, hai giao thức phổ biến nhất để truyền dữ liệu là \u003cstrong\u003eTCP (Transmission Control Protocol)\u003c/strong\u003e và \u003cstrong\u003eUDP (User Datagram Protocol)\u003c/strong\u003e. Mỗi giao thức có đặc điểm riêng, phù hợp với từng loại ứng dụng khác nhau.\u003c/p\u003e\n\u003cp\u003eBài viết này sẽ giúp em hiểu rõ sự khác biệt giữa TCP và UDP, cách sử dụng chúng trong Java, và khi nào nên chọn giao thức nào.\u003c/p\u003e","title":"So sánh TCP và UDP trong lập trình mạng"},{"content":"🌐 Tạo API đơn giản bằng Node.js và Express 🔍 REST API là gì? REST API (Representational State Transfer) là giao diện lập trình cho phép client (trình duyệt, ứng dụng) giao tiếp với server thông qua các phương thức HTTP như GET, POST, PUT, DELETE.\nĐây là nền tảng của hầu hết các ứng dụng web và di động hiện đại.\n🎯 Mục tiêu bài viết Tạo một API đơn giản để quản lý danh sách người dùng với hai chức năng:\n✅ Lấy danh sách người dùng ✅ Thêm người dùng mới 🧩 Bước 1: Khởi tạo dự án Node.js Tạo thư mục mới và cài đặt Express:\nmkdir SimpleAPI \u0026amp;\u0026amp; cd SimpleAPI npm init -y npm install express touch index.js 🧠 Bước 2: Viết mã API trong index.js const express = require(\u0026#34;express\u0026#34;); const app = express(); app.use(express.json()); // Dữ liệu mẫu let users = [ { id: 1, name: \u0026#34;Phúc\u0026#34; }, { id: 2, name: \u0026#34;Mai\u0026#34; } ]; // 📍 GET: Lấy danh sách người dùng app.get(\u0026#34;/api/users\u0026#34;, (req, res) =\u0026gt; { res.json(users); }); // 📍 POST: Thêm người dùng mới app.post(\u0026#34;/api/users\u0026#34;, (req, res) =\u0026gt; { const newUser = { id: users.length + 1, name: req.body.name }; users.push(newUser); res.json(newUser); }); const PORT = 3000; app.listen(PORT, () =\u0026gt; console.log(`🚀 Server chạy tại cổng ${PORT}`)); 🧪 Bước 3: Kiểm tra API bằng Postman hoặc cURL 🔹 Lấy danh sách người dùng\nGET http://localhost:3000/api/users 🔹 Thêm người dùng mới\nPOST http://localhost:3000/api/users Content-Type: application/json { \u0026#34;name\u0026#34;: \u0026#34;Ngọc\u0026#34; } Kết quả trả về:\n[ { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Phúc\u0026#34; }, { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;Mai\u0026#34; }, { \u0026#34;id\u0026#34;: 3, \u0026#34;name\u0026#34;: \u0026#34;Ngọc\u0026#34; } ] 🧭 Kết luận Sau bài này, bạn đã biết cách:\n⚙️ Tạo server bằng Express 📡 Viết các route HTTP cơ bản 💾 Quản lý dữ liệu tạm thời bằng mảng 🔗 Giao tiếp giữa client và server Đây là nền tảng vững chắc để bạn phát triển các tính năng cao cấp hơn như:\nKết nối MongoDB / MySQL Thêm xác thực người dùng (JWT) Triển khai API lên cloud (Render, Vercel, hoặc Railway) 💡 Gợi ý tiếp theo: Ở bài sau, chúng ta sẽ học cách kết nối API này với frontend React để hiển thị danh sách người dùng và gửi dữ liệu trực tiếp từ trình duyệt.\n","permalink":"https://lephucnz.github.io/blog/posts/new9/","summary":"\u003ch1 id=\"-tạo-api-đơn-giản-bằng-nodejs-và-express\"\u003e🌐 Tạo API đơn giản bằng Node.js và Express\u003c/h1\u003e\n\u003ch2 id=\"-rest-api-là-gì\"\u003e🔍 REST API là gì?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eREST API\u003c/strong\u003e (Representational State Transfer) là giao diện lập trình cho phép \u003cstrong\u003eclient\u003c/strong\u003e (trình duyệt, ứng dụng) giao tiếp với \u003cstrong\u003eserver\u003c/strong\u003e thông qua các phương thức HTTP như \u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, \u003ccode\u003ePUT\u003c/code\u003e, \u003ccode\u003eDELETE\u003c/code\u003e.\u003cbr\u003e\nĐây là nền tảng của hầu hết các ứng dụng web và di động hiện đại.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-mục-tiêu-bài-viết\"\u003e🎯 Mục tiêu bài viết\u003c/h2\u003e\n\u003cp\u003eTạo một \u003cstrong\u003eAPI đơn giản\u003c/strong\u003e để quản lý danh sách người dùng với hai chức năng:\u003c/p\u003e","title":"Tạo API đơn giản bằng Node.js và Express"},{"content":"💬 Mục tiêu bài viết Trong bài viết này, chúng ta sẽ cùng nhau xây dựng một ứng dụng chat đơn giản giữa client và server sử dụng Java Socket.\nĐây là ví dụ điển hình giúp hiểu rõ cách giao tiếp giữa hai máy thông qua giao thức TCP — nền tảng của lập trình mạng.\nỨng dụng này sẽ giúp em:\nHiểu cách thiết lập kết nối giữa hai máy Biết cách truyền dữ liệu qua luồng đầu vào/ra Làm quen với mô hình client-server trong thực tế 🧩 Kiến thức cần nắm Trước khi bắt đầu, em cần nắm một số khái niệm cơ bản:\nSocket: Điểm cuối của kết nối mạng. Trong Java, Socket đại diện cho kết nối giữa client và server. ServerSocket: Lớp dùng để tạo server, lắng nghe và chấp nhận kết nối từ client. InputStream / OutputStream: Luồng dữ liệu dùng để đọc và ghi thông tin giữa hai bên. 🖥️ Cấu trúc ứng dụng Ứng dụng gồm 2 phần chính:\nServer.java – Chạy trước, lắng nghe kết nối từ client, nhận và phản hồi tin nhắn. Client.java – Kết nối đến server, gửi tin nhắn và nhận phản hồi. Mô hình này mô phỏng cách hoạt động của các ứng dụng chat như Messenger, Zalo, hoặc các hệ thống giao tiếp nội bộ.\n🔧 Mã nguồn ứng dụng 🔹 Server.java – Máy chủ import java.io.*; import java.net.*; public class Server { public static void main(String[] args) throws IOException { ServerSocket serverSocket = new ServerSocket(1234); System.out.println(\u0026#34;Server đang chạy và lắng nghe kết nối...\u0026#34;); Socket clientSocket = serverSocket.accept(); System.out.println(\u0026#34;Client đã kết nối!\u0026#34;); BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true); String message; while ((message = in.readLine()) != null) { System.out.println(\u0026#34;Client: \u0026#34; + message); out.println(\u0026#34;Server nhận: \u0026#34; + message); } serverSocket.close(); } } 🔹 Client.java – Máy khách import java.io.*; import java.net.*; public class Client { public static void main(String[] args) throws IOException { Socket socket = new Socket(\u0026#34;localhost\u0026#34;, 1234); System.out.println(\u0026#34;Đã kết nối đến server!\u0026#34;); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream())); PrintWriter out = new PrintWriter(socket.getOutputStream(), true); BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in)); String input; while ((input = userInput.readLine()) != null) { out.println(input); System.out.println(\u0026#34;Phản hồi từ server: \u0026#34; + in.readLine()); } socket.close(); } } 🧪 Cách chạy ứng dụng 1️⃣ Biên dịch cả hai file: javac Server.java javac Client.java 2️⃣ Chạy server trước: java Server 3️⃣ Mở cửa sổ terminal khác và chạy client: java Client Sau đó, nhập tin nhắn từ client và xem phản hồi từ server.\n📦 Mở rộng ứng dụng Sau khi hoàn thành phiên bản cơ bản, em có thể nâng cấp ứng dụng theo các hướng sau:\nCho phép nhiều client kết nối cùng lúc (dùng Thread hoặc ExecutorService) Thêm giao diện đồ họa bằng JavaFX hoặc Swing Lưu lịch sử chat vào file hoặc cơ sở dữ liệu Mã hóa dữ liệu để tăng bảo mật (sử dụng AES hoặc SSL Socket) Tạo phòng chat nhóm hoặc chat riêng tư 📌 Kết luận Ứng dụng chat đơn giản bằng Java Socket là một ví dụ thực tế giúp em hiểu rõ cách giao tiếp giữa hai máy qua mạng.\nĐây là nền tảng để xây dựng các hệ thống phức tạp hơn như:\nChat đa người dùng Truyền file Dịch vụ mạng nội bộ Việc nắm vững lập trình Socket sẽ giúp em tiến xa hơn trong các lĩnh vực như:\nPhát triển ứng dụng mạng Lập trình hệ thống phân tán Xây dựng backend cho ứng dụng thời gian thực ","permalink":"https://lephucnz.github.io/blog/posts/new2/","summary":"\u003ch2 id=\"-mục-tiêu-bài-viết\"\u003e💬 Mục tiêu bài viết\u003c/h2\u003e\n\u003cp\u003eTrong bài viết này, chúng ta sẽ cùng nhau xây dựng một ứng dụng \u003cstrong\u003echat đơn giản\u003c/strong\u003e giữa \u003cstrong\u003eclient\u003c/strong\u003e và \u003cstrong\u003eserver\u003c/strong\u003e sử dụng \u003cstrong\u003eJava Socket\u003c/strong\u003e.\u003cbr\u003e\nĐây là ví dụ điển hình giúp hiểu rõ cách giao tiếp giữa hai máy thông qua giao thức TCP — nền tảng của lập trình mạng.\u003c/p\u003e\n\u003cp\u003eỨng dụng này sẽ giúp em:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHiểu cách thiết lập kết nối giữa hai máy\u003c/li\u003e\n\u003cli\u003eBiết cách truyền dữ liệu qua luồng đầu vào/ra\u003c/li\u003e\n\u003cli\u003eLàm quen với mô hình client-server trong thực tế\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-kiến-thức-cần-nắm\"\u003e🧩 Kiến thức cần nắm\u003c/h2\u003e\n\u003cp\u003eTrước khi bắt đầu, em cần nắm một số khái niệm cơ bản:\u003c/p\u003e","title":"Tạo ứng dụng chat đơn giản bằng Java Socket"},{"content":"🌐 WebSocket là gì? WebSocket là một giao thức mạng cho phép thiết lập kết nối hai chiều (full-duplex) giữa client và server thông qua một kết nối TCP duy nhất. Khác với HTTP, WebSocket duy trì kết nối liên tục, giúp truyền dữ liệu nhanh chóng mà không cần gửi lại toàn bộ yêu cầu mỗi lần.\n🔄 So sánh WebSocket với HTTP: Tiêu chí HTTP WebSocket Kiểu kết nối Một chiều (client → server) Hai chiều (client ↔ server) Tốc độ phản hồi Chậm hơn do phải gửi lại yêu cầu Nhanh hơn, kết nối liên tục Ứng dụng phổ biến Website tĩnh, API REST Chat, game, thông báo realtime 🎯 Khi nào nên dùng WebSocket? WebSocket rất hữu ích khi em cần:\nGiao tiếp thời gian thực (chat, thông báo, trạng thái người dùng) Cập nhật dữ liệu liên tục mà không cần reload trang Xây dựng game online hoặc hệ thống giám sát trực tiếp 🧪 Ví dụ: Tạo ứng dụng chat đơn giản bằng WebSocket 📁 Cấu trúc dự án websocket-chat/ ├── server.js // File tạo WebSocket server bằng Node.js └── index.html // Giao diện client kết nối và gửi tin nhắn qua WebSocket 🔹 Bước 1: Tạo server WebSocket bằng Node.js server.js\nconst WebSocket = require(\u0026#39;ws\u0026#39;); const server = new WebSocket.Server({ port: 8080 }); server.on(\u0026#39;connection\u0026#39;, socket =\u0026gt; { console.log(\u0026#39;Client đã kết nối\u0026#39;); socket.on(\u0026#39;message\u0026#39;, message =\u0026gt; { console.log(\u0026#39;Tin nhắn từ client:\u0026#39;, message); socket.send(`Server nhận: ${message}`); }); socket.on(\u0026#39;close\u0026#39;, () =\u0026gt; { console.log(\u0026#39;Client đã ngắt kết nối\u0026#39;); }); }); Để chạy server, bạn cần cài thư viện ws:\nnpm install ws node server.js 🔹 Bước 2: Tạo giao diện client bằng HTML + JavaScript index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Chat WebSocket\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Ứng dụng Chat WebSocket\u0026lt;/h2\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;messageInput\u0026#34; placeholder=\u0026#34;Nhập tin nhắn...\u0026#34; /\u0026gt; \u0026lt;button onclick=\u0026#34;sendMessage()\u0026#34;\u0026gt;Gửi\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;chatLog\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const socket = new WebSocket(\u0026#39;ws://localhost:8080\u0026#39;); socket.onopen = () =\u0026gt; { console.log(\u0026#39;Đã kết nối đến server\u0026#39;); }; socket.onmessage = event =\u0026gt; { const chatLog = document.getElementById(\u0026#39;chatLog\u0026#39;); chatLog.innerHTML += `\u0026lt;p\u0026gt;${event.data}\u0026lt;/p\u0026gt;`; }; function sendMessage() { const input = document.getElementById(\u0026#39;messageInput\u0026#39;); socket.send(input.value); input.value = \u0026#39;\u0026#39;; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 🧪 Cách chạy thử Mở terminal, chạy server:\nnode server.js Mở file index.html bằng trình duyệt.\nNhập tin nhắn và nhấn “Gửi” để thấy phản hồi từ server.\n📦 Mở rộng ứng dụng Sau khi hiểu cách hoạt động cơ bản, em có thể nâng cấp ứng dụng:\nCho phép nhiều client kết nối và chat với nhau (broadcast) Thêm giao diện đẹp bằng CSS hoặc framework như Bootstrap Lưu lịch sử chat vào cơ sở dữ liệu Tích hợp xác thực người dùng Dùng WebSocket kết hợp với Express hoặc NestJS 📌 Kết luận WebSocket là công nghệ mạnh mẽ giúp xây dựng các ứng dụng thời gian thực hiệu quả.\nViệc hiểu và sử dụng WebSocket trong JavaScript sẽ giúp em phát triển các hệ thống hiện đại như:\nChat nội bộ công ty Hệ thống thông báo realtime Game đa người chơi Dashboard giám sát trực tiếp ","permalink":"https://lephucnz.github.io/blog/posts/new4/","summary":"\u003ch2 id=\"-websocket-là-gì\"\u003e🌐 WebSocket là gì?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWebSocket\u003c/strong\u003e là một giao thức mạng cho phép thiết lập kết nối hai chiều (full-duplex) giữa client và server thông qua một kết nối TCP duy nhất. Khác với HTTP, WebSocket duy trì kết nối liên tục, giúp truyền dữ liệu nhanh chóng mà không cần gửi lại toàn bộ yêu cầu mỗi lần.\u003c/p\u003e\n\u003ch3 id=\"-so-sánh-websocket-với-http\"\u003e🔄 So sánh WebSocket với HTTP:\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eTiêu chí\u003c/th\u003e\n          \u003cth\u003eHTTP\u003c/th\u003e\n          \u003cth\u003eWebSocket\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eKiểu kết nối\u003c/td\u003e\n          \u003ctd\u003eMột chiều (client → server)\u003c/td\u003e\n          \u003ctd\u003eHai chiều (client ↔ server)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eTốc độ phản hồi\u003c/td\u003e\n          \u003ctd\u003eChậm hơn do phải gửi lại yêu cầu\u003c/td\u003e\n          \u003ctd\u003eNhanh hơn, kết nối liên tục\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eỨng dụng phổ biến\u003c/td\u003e\n          \u003ctd\u003eWebsite tĩnh, API REST\u003c/td\u003e\n          \u003ctd\u003eChat, game, thông báo realtime\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"-khi-nào-nên-dùng-websocket\"\u003e🎯 Khi nào nên dùng WebSocket?\u003c/h2\u003e\n\u003cp\u003eWebSocket rất hữu ích khi em cần:\u003c/p\u003e","title":"WebSocket trong JavaScript: Giao tiếp thời gian thực"},{"content":"🔐 JWT là gì? JWT (JSON Web Token) là một chuẩn mở dùng để truyền thông tin giữa các bên một cách an toàn dưới dạng JSON.\nNó thường được dùng để xác thực người dùng trong các ứng dụng web hiện đại.\nMột JWT gồm 3 phần:\nHeader: thông tin thuật toán và loại token Payload: dữ liệu (ví dụ: userId, role) Signature: chữ ký số để xác minh tính hợp lệ 📁 Cấu trúc dự án jwt-auth-nodejs/ ├── models/ │ └── User.js ├── middleware/ │ └── auth.js ├── routes/ │ ├── auth.js │ └── stocks.js ├── .env ├── package.json └── server.js 🧩 Cài đặt và cấu hình 📝 Step 1: Cài đặt thư viện JWT npm install express mongoose dotenv jsonwebtoken bcryptjs 📝 Step 2: Tạo model người dùng 📁 models/User.js\nconst mongoose = require(\u0026#34;mongoose\u0026#34;); const UserSchema = new mongoose.Schema({ username: { type: String, required: true, unique: true }, password: { type: String, required: true } }); module.exports = mongoose.model(\u0026#34;User\u0026#34;, UserSchema); 📝 Step 3: Tạo route đăng ký và đăng nhập 📁 routes/auth.js\nconst express = require(\u0026#34;express\u0026#34;); const router = express.Router(); const User = require(\u0026#34;../models/User\u0026#34;); const bcrypt = require(\u0026#34;bcryptjs\u0026#34;); const jwt = require(\u0026#34;jsonwebtoken\u0026#34;); router.post(\u0026#34;/register\u0026#34;, async (req, res) =\u0026gt; { const { username, password } = req.body; const hashedPassword = await bcrypt.hash(password, 10); const newUser = new User({ username, password: hashedPassword }); await newUser.save(); res.json({ message: \u0026#34;Đăng ký thành công\u0026#34; }); }); router.post(\u0026#34;/login\u0026#34;, async (req, res) =\u0026gt; { const { username, password } = req.body; const user = await User.findOne({ username }); if (!user) return res.status(400).json({ message: \u0026#34;Sai tài khoản\u0026#34; }); const isMatch = await bcrypt.compare(password, user.password); if (!isMatch) return res.status(400).json({ message: \u0026#34;Sai mật khẩu\u0026#34; }); const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: \u0026#34;1h\u0026#34; }); res.json({ token }); }); module.exports = router; 📝 Step 4: Tạo middleware xác thực 📁 middleware/auth.js\nconst jwt = require(\u0026#34;jsonwebtoken\u0026#34;); const auth = (req, res, next) =\u0026gt; { const token = req.header(\u0026#34;Authorization\u0026#34;); if (!token) return res.status(401).json({ message: \u0026#34;Không có token\u0026#34; }); try { const decoded = jwt.verify(token, process.env.JWT_SECRET); req.user = decoded; next(); } catch (err) { res.status(401).json({ message: \u0026#34;Token không hợp lệ\u0026#34; }); } }; module.exports = auth; 📝 Step 5: Bảo vệ route bằng middleware 📁 routes/stocks.js\nconst express = require(\u0026#34;express\u0026#34;); const router = express.Router(); const Stock = require(\u0026#34;../models/Stock\u0026#34;); const auth = require(\u0026#34;../middleware/auth\u0026#34;); router.get(\u0026#34;/\u0026#34;, auth, async (req, res) =\u0026gt; { const stocks = await Stock.find(); res.json(stocks); }); router.post(\u0026#34;/\u0026#34;, auth, async (req, res) =\u0026gt; { const newStock = new Stock(req.body); const savedStock = await newStock.save(); res.json(savedStock); }); module.exports = router; 📝 Step 6: Cấu hình server chính 📁 server.js\nconst express = require(\u0026#34;express\u0026#34;); const mongoose = require(\u0026#34;mongoose\u0026#34;); const dotenv = require(\u0026#34;dotenv\u0026#34;); const authRoutes = require(\u0026#34;./routes/auth\u0026#34;); const stockRoutes = require(\u0026#34;./routes/stocks\u0026#34;); dotenv.config(); const app = express(); app.use(express.json()); mongoose.connect(\u0026#34;mongodb://localhost:27017/jwt-auth\u0026#34;, { useNewUrlParser: true, useUnifiedTopology: true }) .then(() =\u0026gt; console.log(\u0026#34;✅ MongoDB Connected\u0026#34;)) .catch(err =\u0026gt; console.error(err)); app.use(\u0026#34;/api/auth\u0026#34;, authRoutes); app.use(\u0026#34;/api/stocks\u0026#34;, stockRoutes); app.listen(5000, () =\u0026gt; console.log(\u0026#34;🚀 Server chạy tại http://localhost:5000\u0026#34;)); 📝 Step 7: Thêm biến môi trường 📁 .env\nJWT_SECRET=supersecretkey123 🚀 Kết quả ✅ Người dùng có thể đăng ký và đăng nhập\n✅ Sau khi đăng nhập, server trả về JWT\n✅ Các route quan trọng được bảo vệ bằng middleware\n✅ Chỉ người dùng có token hợp lệ mới truy cập được\n📌 Kết luận Xác thực bằng JWT là phương pháp phổ biến và hiệu quả trong các ứng dụng web hiện đại.\nSau bài này, bạn có thể:\nTích hợp xác thực vào bất kỳ API nào Quản lý phiên đăng nhập mà không cần session Mở rộng hệ thống với phân quyền (admin, user) Kết nối frontend để gửi token qua header ","permalink":"https://lephucnz.github.io/blog/posts/new8/","summary":"\u003ch2 id=\"-jwt-là-gì\"\u003e🔐 JWT là gì?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eJWT (JSON Web Token)\u003c/strong\u003e là một chuẩn mở dùng để truyền thông tin giữa các bên một cách an toàn dưới dạng JSON.\u003cbr\u003e\nNó thường được dùng để xác thực người dùng trong các ứng dụng web hiện đại.\u003c/p\u003e\n\u003cp\u003eMột JWT gồm 3 phần:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHeader\u003c/strong\u003e: thông tin thuật toán và loại token\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePayload\u003c/strong\u003e: dữ liệu (ví dụ: userId, role)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSignature\u003c/strong\u003e: chữ ký số để xác minh tính hợp lệ\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-cấu-trúc-dự-án\"\u003e📁 Cấu trúc dự án\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejwt-auth-nodejs/\n├── models/\n│   └── User.js\n├── middleware/\n│   └── auth.js\n├── routes/\n│   ├── auth.js\n│   └── stocks.js\n├── .env\n├── package.json\n└── server.js\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003ch2 id=\"-cài-đặt-và-cấu-hình\"\u003e🧩 Cài đặt và cấu hình\u003c/h2\u003e\n\u003ch3 id=\"-step-1-cài-đặt-thư-viện-jwt\"\u003e📝 Step 1: Cài đặt thư viện JWT\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install express mongoose dotenv jsonwebtoken bcryptjs\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"-step-2-tạo-model-người-dùng\"\u003e📝 Step 2: Tạo model người dùng\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e📁 models/User.js\u003c/strong\u003e\u003c/p\u003e","title":"Xác thực người dùng bằng JWT trong Node.js"}]